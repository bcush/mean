Last login: Mon Sep 12 20:19:34 on ttys000
beecushman:intro_to_mongo beecushman$ mongo
MongoDB shell version: 3.2.9
connecting to: test
Server has startup warnings: 
2016-09-12T20:22:06.304-0700 I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.
2016-09-12T20:22:06.304-0700 I CONTROL  [initandlisten] 
2016-09-12T20:22:06.304-0700 I CONTROL  [initandlisten] 
2016-09-12T20:22:06.304-0700 I CONTROL  [initandlisten] ** WARNING: soft rlimits too low. Number of files is 256, should be at least 1000
> show db
2016-09-12T20:26:09.235-0700 E QUERY    [thread1] Error: don't know how to show [db] :
shellHelper.show@src/mongo/shell/utils.js:865:11
shellHelper@src/mongo/shell/utils.js:651:15
@(shellhelp2):1:1

> show dbs
local   0.000GB
testDB  0.000GB
> use db my_first_db
2016-09-12T20:28:20.723-0700 E QUERY    [thread1] Error: [db my_first_db] is not a valid database name :
Mongo.prototype.getDB@src/mongo/shell/mongo.js:56:12
shellHelper.use@src/mongo/shell/utils.js:664:10
shellHelper@src/mongo/shell/utils.js:651:15
@(shellhelp2):1:1

> use my_first_db
switched to db my_first_db
> show dbs
local   0.000GB
testDB  0.000GB
> db
my_first_db
> db.createCollection(students)
2016-09-12T20:28:54.595-0700 E QUERY    [thread1] ReferenceError: students is not defined :
@(shell):1:1

> db.createCollection('students')
{ "ok" : 1 }
> show
2016-09-12T20:29:10.912-0700 E QUERY    [thread1] Error: don't know how to show [] :
shellHelper.show@src/mongo/shell/utils.js:865:11
shellHelper@src/mongo/shell/utils.js:651:15
@(shellhelp2):1:1

> show collections
students
> db.students.insert({name: "Brian Cushman", home_state: "California", lucky_number: 5, birthday: { month: 05, day: 02, year: 1982 }})
WriteResult({ "nInserted" : 1 })
> show collections
students
> students.find()
2016-09-12T20:33:34.140-0700 E QUERY    [thread1] ReferenceError: students is not defined :
@(shell):1:1

> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
> db.students.insert({name: "Sal Perez", home_state: "California", lucky_number: 7, birthday: { month: 07, day: 03, year: 1990 }})
WriteResult({ "nInserted" : 1 })
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
> db.students.insert(name: "Joey So", home_state: "California", lucky_number: 9, birthday: { month: 01, day: 04, year: 1991 }})
2016-09-12T20:36:27.702-0700 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:23

> db.students.insert({name: "Joey So", home_state: "California", lucky_number: 9, birthday: { month: 01, day: 04, year: 1991 }})
WriteResult({ "nInserted" : 1 })
> db.students.insert({name: "Danny Anz", home_state: "California", lucky_number: 10, birthday: { month: 08, day: 11, year: 1970 }})
WriteResult({ "nInserted" : 1 })
> db.students.insert({ name: "Tupac Shakur", home_state: "California", lucky_number: 1, birthday: { month: 01, day: 01, year: 1978 }})
WriteResult({ "nInserted" : 1 })
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
{ "_id" : ObjectId("57d7745d63e6ef9ad2f56638"), "name" : "Joey So", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 1, "day" : 4, "year" : 1991 } }
{ "_id" : ObjectId("57d7748363e6ef9ad2f56639"), "name" : "Danny Anz", "home_state" : "California", "lucky_number" : 10, "birthday" : { "month" : 8, "day" : 11, "year" : 1970 } }
{ "_id" : ObjectId("57d774eb63e6ef9ad2f5663a"), "name" : "Tupac Shakur", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 1, "day" : 1, "year" : 1978 } }
> db.students.find({ $or: [{ home_state: "California" }, { home_state: "Washington" }]})
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
{ "_id" : ObjectId("57d7745d63e6ef9ad2f56638"), "name" : "Joey So", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 1, "day" : 4, "year" : 1991 } }
{ "_id" : ObjectId("57d7748363e6ef9ad2f56639"), "name" : "Danny Anz", "home_state" : "California", "lucky_number" : 10, "birthday" : { "month" : 8, "day" : 11, "year" : 1970 } }
{ "_id" : ObjectId("57d774eb63e6ef9ad2f5663a"), "name" : "Tupac Shakur", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 1, "day" : 1, "year" : 1978 } }
> db.students.find({ lucky_number: { $gt: 3 } })
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
{ "_id" : ObjectId("57d7745d63e6ef9ad2f56638"), "name" : "Joey So", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 1, "day" : 4, "year" : 1991 } }
{ "_id" : ObjectId("57d7748363e6ef9ad2f56639"), "name" : "Danny Anz", "home_state" : "California", "lucky_number" : 10, "birthday" : { "month" : 8, "day" : 11, "year" : 1970 } }
> db.students.find({ lucky_number: { $lte: 10 }})
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
{ "_id" : ObjectId("57d7745d63e6ef9ad2f56638"), "name" : "Joey So", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 1, "day" : 4, "year" : 1991 } }
{ "_id" : ObjectId("57d7748363e6ef9ad2f56639"), "name" : "Danny Anz", "home_state" : "California", "lucky_number" : 10, "birthday" : { "month" : 8, "day" : 11, "year" : 1970 } }
{ "_id" : ObjectId("57d774eb63e6ef9ad2f5663a"), "name" : "Tupac Shakur", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 1, "day" : 1, "year" : 1978 } }
> db.students.find({ lucky_number: { $elemMatch: { $gte: 1, $lte: 9 } }})
> db.students.find({ lucky_number: { $gte: 1, $lte 9 }})
2016-09-12T20:53:51.620-0700 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:49

> db.students.find({ lucky_number: { $gte: 1, $lte: 9 }})
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "California", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 } }
{ "_id" : ObjectId("57d773c663e6ef9ad2f56637"), "name" : "Sal Perez", "home_state" : "California", "lucky_number" : 7, "birthday" : { "month" : 7, "day" : 3, "year" : 1990 } }
{ "_id" : ObjectId("57d7745d63e6ef9ad2f56638"), "name" : "Joey So", "home_state" : "California", "lucky_number" : 9, "birthday" : { "month" : 1, "day" : 4, "year" : 1991 } }
{ "_id" : ObjectId("57d774eb63e6ef9ad2f5663a"), "name" : "Tupac Shakur", "home_state" : "California", "lucky_number" : 1, "birthday" : { "month" : 1, "day" : 1, "year" : 1978 } }
> db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	}
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	}
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	}
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	}
}
> db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}}, false)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	}
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	}
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	}
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	}
}
> db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}}, multi)
2016-09-12T21:06:55.873-0700 E QUERY    [thread1] ReferenceError: multi is not defined :
@(shell):1:32

> db.students.update({}, {$set: {interests: ['coding', 'brunch', 'MongoDB']}}, false, true)
WriteResult({ "nMatched" : 5, "nUpserted" : 0, "nModified" : 4 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
> db.students.update({name: "Brian Cushman"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'riding bike']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"riding bike"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB"
	]
}
> db.students.update({name: "Sal Perez"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'being sweg']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name: "Joey So"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'eating kbbq']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name: "Danny Anz"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'managing ppl']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name: "Tupac Shakur"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'rapping']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name: "Tupac Shakur"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'rapping', 'taxes']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"riding bike"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"being sweg"
	]
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"eating kbbq"
	]
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"managing ppl"
	]
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"rapping",
		"taxes"
	]
}
> db.students.update({name: "Tupac Shakur"}, {$set: {interests: ['coding', 'brunch', 'MongoDB', 'rapping']}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find().pretty()
{
	"_id" : ObjectId("57d7738563e6ef9ad2f56636"),
	"name" : "Brian Cushman",
	"home_state" : "California",
	"lucky_number" : 5,
	"birthday" : {
		"month" : 5,
		"day" : 2,
		"year" : 1982
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"riding bike"
	]
}
{
	"_id" : ObjectId("57d773c663e6ef9ad2f56637"),
	"name" : "Sal Perez",
	"home_state" : "California",
	"lucky_number" : 7,
	"birthday" : {
		"month" : 7,
		"day" : 3,
		"year" : 1990
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"being sweg"
	]
}
{
	"_id" : ObjectId("57d7745d63e6ef9ad2f56638"),
	"name" : "Joey So",
	"home_state" : "California",
	"lucky_number" : 9,
	"birthday" : {
		"month" : 1,
		"day" : 4,
		"year" : 1991
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"eating kbbq"
	]
}
{
	"_id" : ObjectId("57d7748363e6ef9ad2f56639"),
	"name" : "Danny Anz",
	"home_state" : "California",
	"lucky_number" : 10,
	"birthday" : {
		"month" : 8,
		"day" : 11,
		"year" : 1970
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"managing ppl"
	]
}
{
	"_id" : ObjectId("57d774eb63e6ef9ad2f5663a"),
	"name" : "Tupac Shakur",
	"home_state" : "California",
	"lucky_number" : 1,
	"birthday" : {
		"month" : 1,
		"day" : 1,
		"year" : 1978
	},
	"interests" : [
		"coding",
		"brunch",
		"MongoDB",
		"rapping"
	]
}
> db.students.update({name: "Tupac Shakur"}, {$set: home_state: "New York"}})
2016-09-12T21:12:08.442-0700 E QUERY    [thread1] SyntaxError: missing } after property list @(shell):1:60

> db.students.update({name: "Tupac Shakur"}, {$set: home_state: "New York"})
2016-09-12T21:13:20.438-0700 E QUERY    [thread1] SyntaxError: missing } after property list @(shell):1:60

> db.students.update({name: "Tupac Shakur"}, {$set {home_state: "New York"}})
2016-09-12T21:14:09.770-0700 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:49

> db.students.update({name: "Tupac Shakur"}, {$set: {home_state: "New York"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update({name: "Brian Cushman"}, {$set: {home_state: "New York"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.remove({home_state: "California"})
WriteResult({ "nRemoved" : 3 })
> db.students.remove({ name: "Tupac Shakur" })
WriteResult({ "nRemoved" : 1 })
> db.students.update( {}, { $set: {number_of_belts: 0} })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.update( {}, { $inc: {number_of_belts: 1} })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "New York", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 }, "interests" : [ "coding", "brunch", "MongoDB", "riding bike" ], "number_of_belts" : 1 }
> db.students.update ( {}, { $rename: { 'number_of_belts': 'belts_earned' }})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "New York", "lucky_number" : 5, "birthday" : { "month" : 5, "day" : 2, "year" : 1982 }, "interests" : [ "coding", "brunch", "MongoDB", "riding bike" ], "belts_earned" : 1 }
> db.students.update ( {}, { $unset: { lucky_number } })
2016-09-12T21:21:39.491-0700 E QUERY    [thread1] ReferenceError: lucky_number is not defined :
@(shell):1:38

> db.students.update ( {}, { $unset: { lucky_number: "" } })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "New York", "birthday" : { "month" : 5, "day" : 2, "year" : 1982 }, "interests" : [ "coding", "brunch", "MongoDB", "riding bike" ], "belts_earned" : 1 }
> db.students.update( {}, $currentDate { updated_on: true })
2016-09-12T21:24:46.959-0700 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:37

> db.students.update({}, $currentDate: { updated_on: true })
2016-09-12T21:25:03.073-0700 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:35

> db.students.update({}, {$currentDate: { updated_on: true }})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.users.find()
> db.students.find()
{ "_id" : ObjectId("57d7738563e6ef9ad2f56636"), "name" : "Brian Cushman", "home_state" : "New York", "birthday" : { "month" : 5, "day" : 2, "year" : 1982 }, "interests" : [ "coding", "brunch", "MongoDB", "riding bike" ], "belts_earned" : 1, "updated_on" : ISODate("2016-09-13T04:25:28.475Z") }
> 
